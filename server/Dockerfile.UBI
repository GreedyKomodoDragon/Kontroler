# Build the manager binary
FROM golang:1.22 AS builder
ARG TARGETOS
ARG TARGETARCH

WORKDIR /workspace
# Copy the Go Modules manifests
COPY go.mod go.mod
COPY go.sum go.sum

# cache deps before building and copying source so that we don't need to re-download as much
# and so that source changes don't invalidate our downloaded layer
RUN go mod download

# Copy the go source
COPY cmd/main.go cmd/main.go
COPY pkg/ pkg/

# Build
# the GOARCH has not a default value to allow the binary be built according to the host where the command
# was called. For example, if we call make docker-build in a local env which has the Apple Silicon M1 SO
# the docker BUILDPLATFORM arg will be linux/arm64 when for Apple x86 it will be linux/amd64. Therefore,
# by leaving it empty we can ensure that the container and binary shipped on it will have the same platform.
RUN CGO_ENABLED=0 GOOS=${TARGETOS:-linux} GOARCH=${TARGETARCH} go build -a -o server cmd/main.go

# Use Micro UBI as the minimal base image
FROM registry.access.redhat.com/ubi8-micro@sha256:cf8d8796a2c07577b4adc8b598aa648b200cc6b4b5f78d2e13539711ea64f275

# Create a directory for the application
WORKDIR /app

# Copy the binary from the builder stage
COPY --from=builder /workspace/server /app/server

# Ensure the binary is executable
# Set file permissions for a non-root user (use UID 1001)
RUN chmod +x /app/server && chown -R 1001:1001 /app

# Switch to the non-root user (UID 1001)
USER 1001

# Set the correct entrypoint (use the path to the binary inside /app)
ENTRYPOINT ["/app/server"]
