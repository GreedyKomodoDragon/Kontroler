# Default values for kontroler.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

imagePullSecrets: []

nameOverride: ""
fullnameOverride: ""

crds:
  install: true
  retain: false

db:
  # sqlite or postgresql
  type: sqlite
  sqlite:
    path: /data
    fileName: database.db
    authFileName: auth.db
    journalMode: "WAL"
    synchronous: "NORMAL"
    # for KB, negative to use memory size in KB
    cacheSize: -2000
    tempStore: "MEMORY"
    pvc:
      existing: ""
      # Currently only supports the array format
      accessModes: ["ReadWriteMany"]
      size: 2Gi
      # If empty it will omit and use the default storageclass in the cluster
      storageClassName: ""
      selector:
      retain: true
  postgresql:
    name: kontroler
    endpoint: postgres-postgresql.default.svc.cluster.local:5432

logStorage:
  enabled: true
  type: s3
  s3:
    bucketName: kontroler
    region: eu-west-2
    # If false, it will tell the services to check the implicit roles e.g. IAM role
    useCred: true
    # Contains both access key and access id
    secret:
      # name of the secret
      name: s3-creds
      # the key for the AWS_ACCESS_KEY_ID
      idKey: AWS_ACCESS_KEY_ID
      # the key for the AWS_SECRET_ACCESS_KEY
      accessKey: AWS_SECRET_ACCESS_KEY
    # Optional: Endpoint of the S3 Service
    endpoint: http://minio.default.svc.cluster.local:9000

certManager:
  enabled: true
  issuerRef:
    kind: Issuer
    name: operator-selfsigned-issuer
  issuer:
    enabled: true
    spec:
      selfSigned: {}

kubeconfig:
  secret: kubeconfig-secret
  mountPath: /etc/kontroler/secrets

controller:
  enabled: true
  image: greedykomodo/kontroler-controller:0.0.1
  config:
    path: /etc/kontroler/config/
    value:
      kubeConfigPath: ""
      workers:
        workerType: "memory"  # or "pebble"
        queueDir: "/queue"    # mount path for pebble queue storage
        workers:
          - namespace: "default"
            count: 2
    configmapOverride: ""
  leaderElectionID: "610a3770.greedykomodo"
  db:
    user: postgres
    password:
      secret: postgres-postgresql
      key: postgres-password
    ssl:
      mode: require
      secret: postgresql-client-tls
      paths:
        ca:
          path: /etc/kontroler/ssl/
          filename: ca.crt
        cert:
          path: /etc/kontroler/ssl/
          filename: client.crt
        key:
          path: /etc/kontroler/ssl/
          filename: client.key
  queueStorage:
    pvc:
      existing: ""
      accessModes: ["ReadWriteOnce"]
      size: 1Gi
      storageClassName: ""
      selector: {}
      retain: true
  serviceAccount:
    create: true
    annotations: {}
    name: ""
  podAnnotations: {}
  podSecurityContext: {}
  securityContext: {}
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
    # runAsUser: 1000
  resources:
    limits:
      cpu: 500m
      memory: 128Mi
    requests:
      cpu: 10m
      memory: 64Mi
  nodeSelector: {}
  tolerations: {}
  affinity: {}

server:
  name: "kontroler-server"
  enabled: true
  replicaCount: 1
  image: "greedykomodo/kontroler-server:0.0.1"
  config:
    path: /etc/kontroler/config/
    value:
      kubeConfigPath: ""
    configmapOverride: ""
  db:
    user: postgres
    password:
      secret: postgres-postgresql
      key: postgres-password
    ssl:
      mode: require
      secret: postgresql-client-tls
      paths:
        ca:
          path: /etc/kontroler/ssl/
          filename: ca.crt
        cert:
          path: /etc/kontroler/ssl/
          filename: client.crt
        key:
          path: /etc/kontroler/ssl/
          filename: client.key
  jwt:
    secret: jwt-kontroller-key
    key: jwt
  imagePullPolicy: Always
  # Assumes some local port forwarding is being applied
  uiAddress: http://localhost:3000
  auditLogs: true
  mtls:
    enabled: false
    insecure: true
    certs:
      caCertSecretName: ca-secret
      certSecretName: my-tls-secret
      keySecretName: my-tls-secret
  serviceAccount:
    create: true
    annotations: {}
    name: "server-sa"
  podAnnotations: {}
  podSecurityContext: {}
  securityContext: {}
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
    # runAsUser: 1000
  resources:
    limits:
      cpu: 500m
      memory: 256Mi
    requests:
      cpu: 10m
      memory: 128Mi
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 100
    targetCPUUtilizationPercentage: 80
    # targetMemoryUtilizationPercentage: 80
  nodeSelector: {}
  tolerations: {}
  affinity: {}
  service:
    type: ClusterIP
    port: 8080
  ingress:
    enabled: false
    className: ""
    annotations: {}
      # kubernetes.io/ingress.class: nginx
      # kubernetes.io/tls-acme: "true"
    hosts:
      - host: chart-example.local
        paths:
          - path: /
            pathType: ImplementationSpecific
    tls: []
    #  - secretName: chart-example-tls
    #    hosts:
    #      - chart-example.local

ui:
  name: "kontroler-ui"
  enabled: true
  replicaCount: 1
  image: "greedykomodo/kontroler-ui:0.0.1"
  imagePullPolicy: Always
  env:
    API_URL: "http://localhost:3000"
    WS_URL: "ws://localhost:3000"
  serviceAccount:
    create: true
    annotations: {}
    name: "ui-sa"
  nginx:
    mtls:
      enabled: false
      insecure: true
      certs:
        caCertSecretName: ca-secret
        certSecretName: my-tls-secret
        keySecretName: my-tls-secret
    configOverride: ""
    reverseProxy: 
      enabled: true
      caCertSecretName: ca-secret
      certSecretName: my-tls-secret
      keySecretName: my-tls-secret
  podAnnotations: {}
  podSecurityContext: {}
  securityContext: {}
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
    # runAsUser: 1000
  resources: {}
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 100
    targetCPUUtilizationPercentage: 80
    # targetMemoryUtilizationPercentage: 80
  nodeSelector: {}
  tolerations: {}
  affinity: {}
  service:
    type: ClusterIP
    port: 3000
  ingress:
    enabled: false
    className: ""
    annotations: {}
      # kubernetes.io/ingress.class: nginx
      # kubernetes.io/tls-acme: "true"
    hosts:
      - host: chart-example.local
        paths:
          - path: /
            pathType: ImplementationSpecific
    tls: []
    #  - secretName: chart-example-tls
    #    hosts:
    #      - chart-example.local