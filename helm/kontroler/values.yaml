# Default values for kontroler.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

imagePullSecrets: []

nameOverride: ""
fullnameOverride: ""

crds:
  install: true
  retain: false

rbac:
  namespaces:
    - "default"
    - "dev"

# Needs to be a postgres compact. DB
db:
  name: kontroler
  endpoint: my-release-postgresql.default.svc.cluster.local:5432

certManager:
  enabled: true
  issuerRef:
    kind: Issuer
    name: operator-selfsigned-issuer
  issuer:
    enabled: true
    spec:
      selfSigned: {}

controller:
  enabled: true
  image: greedykomodo/kontroler-controller:0.0.1
  db:
    user: postgres
    password:
      secret: postgres-kontroler-password
      key: password
    ssl:
      mode: require
      secret: postgresql-client-tls
      paths:
        ca:
          path: /etc/kontroler/ssl/
          filename: ca.crt
        cert:
          path: /etc/kontroler/ssl/
          filename: client.crt
        key:
          path: /etc/kontroler/ssl/
          filename: client.key
  serviceAccount:
    create: true
    annotations: {}
    name: ""
  podAnnotations: {}
  podSecurityContext: {}
  securityContext: {}
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
    # runAsUser: 1000
  resources: {}
  nodeSelector: {}
  tolerations: {}
  affinity: {}

server:
  name: "kontroler-server"
  enabled: true
  replicaCount: 1
  image: "greedykomodo/kontroler-server:0.0.1"
  db:
    user: postgres
    password:
      secret: postgres-kontroler-password
      key: password
    ssl:
      mode: require
      secret: postgresql-client-tls
      paths:
        ca:
          path: /etc/kontroler/ssl/
          filename: ca.crt
        cert:
          path: /etc/kontroler/ssl/
          filename: client.crt
        key:
          path: /etc/kontroler/ssl/
          filename: client.key
  jwt:
    secret: jwt-kontroller-key
    key: jwt
  imagePullPolicy: Always
  # Assumes some local port forwarding is being applied
  uiAddress: http://localhost:3000
  auditLogs: true
  mtls:
    enabled: false
    insecure: true
    certs:
      caCertSecretName: ca-secret
      certSecretName: my-tls-secret
      keySecretName: my-tls-secret
  serviceAccount:
    create: true
    annotations: {}
    name: "server-sa"
  podAnnotations: {}
  podSecurityContext: {}
  securityContext: {}
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
    # runAsUser: 1000
  resources: {}
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 100
    targetCPUUtilizationPercentage: 80
    # targetMemoryUtilizationPercentage: 80
  nodeSelector: {}
  tolerations: {}
  affinity: {}
  service:
    type: ClusterIP
    port: 8080
  ingress:
    enabled: false
    className: ""
    annotations: {}
      # kubernetes.io/ingress.class: nginx
      # kubernetes.io/tls-acme: "true"
    hosts:
      - host: chart-example.local
        paths:
          - path: /
            pathType: ImplementationSpecific
    tls: []
    #  - secretName: chart-example-tls
    #    hosts:
    #      - chart-example.local

ui:
  name: "kontroler-ui"
  enabled: true
  replicaCount: 1
  image: "greedykomodo/kontroler-ui:0.0.1"
  imagePullPolicy: Always
  env:
    API_URL: "http://localhost:3000"
  serviceAccount:
    create: true
    annotations: {}
    name: "ui-sa"
  nginx:
    mtls:
      enabled: false
      insecure: true
      certs:
        caCertSecretName: ca-secret
        certSecretName: my-tls-secret
        keySecretName: my-tls-secret
    configOverride: ""
    reverseProxy: 
      enabled: true
      caCertSecretName: ca-secret
      certSecretName: my-tls-secret
      keySecretName: my-tls-secret
  podAnnotations: {}
  podSecurityContext: {}
  securityContext: {}
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
    # runAsUser: 1000
  resources: {}
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 100
    targetCPUUtilizationPercentage: 80
    # targetMemoryUtilizationPercentage: 80
  nodeSelector: {}
  tolerations: {}
  affinity: {}
  service:
    type: ClusterIP
    port: 3000
  ingress:
    enabled: false
    className: ""
    annotations: {}
      # kubernetes.io/ingress.class: nginx
      # kubernetes.io/tls-acme: "true"
    hosts:
      - host: chart-example.local
        paths:
          - path: /
            pathType: ImplementationSpecific
    tls: []
    #  - secretName: chart-example-tls
    #    hosts:
    #      - chart-example.local