{{ if .Values.controller.enabled }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kontroler-manager
  namespace: {{ .Release.Namespace }}
  labels:
    control-plane: kontroller-manager
    app.kubernetes.io/name: deployment
    app.kubernetes.io/instance: controller-manager
    app.kubernetes.io/component: manager
    app.kubernetes.io/part-of: kontroler
spec:
  selector:
    matchLabels:
      control-plane: kontroller-manager
  replicas: 1
  template:
    metadata:
      annotations:
        kubectl.kubernetes.io/default-container: manager 
        # check sum based on configmap in template/controller/config.yaml
        checksum/config: {{ include (print $.Template.BasePath "/controller/config.yaml") . | sha256sum }}
      labels:
        control-plane: kontroller-manager
    spec:
      securityContext:
        runAsNonRoot: true
      volumes:
        - name: config
          configMap:
            {{ if .Values.controller.config.configmapOverride }}
            name: {{ .Values.controller.config.configmapOverride }}
            {{ else }}
            name: kontroler-config
            {{ end }}
        {{ if .Values.kubeconfig.secret }}
        - name: kubeconfig
          secret:
            secretName: {{ .Values.kubeconfig.secret }}
        {{ end }}
        {{ if eq .Values.db.type "sqlite" }}
        - name: sqlite-db-volume
          persistentVolumeClaim:
          {{ if empty .Values.db.sqlite.pvc.existing }}
            claimName: {{ .Release.Name }}
          {{ else }}
            claimName: {{ .Values.db.sqlite.pvc.existing }}
          {{ end }}
        {{ end }}
        - name: cert
          secret:
            defaultMode: 420
            secretName: webhook-server-cert
        {{ if .Values.controller.db.ssl.secret }}
        - name: db-ssl-secret-volume
          secret:
            secretName: {{ .Values.controller.db.ssl.secret }}
            items:
              {{ if .Values.controller.db.ssl.paths.ca.filename }}
              - key: {{ .Values.controller.db.ssl.paths.ca.filename }}
                path: {{ .Values.controller.db.ssl.paths.ca.filename }}
              {{ end }}
              {{ if .Values.controller.db.ssl.paths.cert.filename }}
              - key: {{ .Values.controller.db.ssl.paths.cert.filename }}
                path: {{ .Values.controller.db.ssl.paths.cert.filename }}
              {{ end }}
              {{ if .Values.controller.db.ssl.paths.key.filename }}
              - key: {{ .Values.controller.db.ssl.paths.key.filename }}
                path: {{ .Values.controller.db.ssl.paths.key.filename }}
              {{ end }}
        {{ end }}
        {{- if eq .Values.controller.config.value.workers.workerType "pebble" }}
        - name: queue-storage
          persistentVolumeClaim:
            {{- if empty .Values.controller.queueStorage.pvc.existing }}
            claimName: {{ .Release.Name }}-queue-storage
            {{- else }}
            claimName: {{ .Values.controller.queueStorage.pvc.existing }}
            {{- end }}
        {{- end }}
      containers:
        - args:
            - --health-probe-bind-address=:8081
            - --metrics-bind-address=127.0.0.1:8080
            - --leader-elect
            - --configpath={{ printf "%s%s" .Values.controller.config.path  "config.yaml" }}
          env:
            - name: LEADER_ELECTION_ID
              value: {{ .Values.controller.leaderElectionID }}
            - name: DB_TYPE
              value: {{ .Values.db.type }}
            {{ if eq .Values.db.type "sqlite" }}
            - name: SQLITE_PATH
              value: {{ include "kontroler.sqlite.fullpath" . }}
            - name: SQLITE_JOURNAL_MODE
              value: {{ .Values.db.sqlite.journalMode }}
            - name: SQLITE_SYNCHRONOUS
              value: {{ .Values.db.sqlite.synchronous }}
            - name: SQLITE_CACHE_SIZE
              value: {{ .Values.db.sqlite.cacheSize | quote }}
            - name: SQLITE_TEMP_STORE
              value: {{ .Values.db.sqlite.tempStore }}
            {{ end }}
            {{ if eq .Values.db.type "postgresql" }}
            - name: DB_NAME
              value: {{ .Values.db.postgresql.name }}
            - name: DB_USER
              value: {{ .Values.controller.db.user }}
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.controller.db.password.secret }}
                  key:  {{ .Values.controller.db.password.key }}
            - name: DB_ENDPOINT
              value: {{ .Values.db.postgresql.endpoint }}
            {{ if .Values.controller.db.ssl.mode }}
            - name: DB_SSL_MODE
              value: {{ .Values.controller.db.ssl.mode }}
            {{ end }}
            {{ if .Values.controller.db.ssl.paths.ca.filename }}
            - name: DB_SSL_CA_CERT
              value: {{ printf "%s%s" .Values.controller.db.ssl.paths.ca.path .Values.controller.db.ssl.paths.ca.filename }}
            {{ end }}
            {{ if .Values.controller.db.ssl.paths.cert.filename }}
            - name: DB_SSL_CERT
              value: {{ printf "%s%s" .Values.controller.db.ssl.paths.cert.path .Values.controller.db.ssl.paths.cert.filename }}
            {{ end }}
            {{ if .Values.controller.db.ssl.paths.key.filename }}
            - name: DB_SSL_KEY
              value: {{ printf "%s%s" .Values.controller.db.ssl.paths.key.path .Values.controller.db.ssl.paths.key.filename }}
            {{ end }}
            {{ end }}
            {{ include "kontroler.s3.envs" . | indent 12 }}
          image: {{ .Values.controller.image }}
          imagePullPolicy: Always
          livenessProbe:
            httpGet:
              path: /healthz
              port: 8081
            initialDelaySeconds: 15
            periodSeconds: 20
          name: manager
          ports:
            - containerPort: 9443
              name: webhook-server
              protocol: TCP
          readinessProbe:
            httpGet:
              path: /readyz
              port: 8081
            initialDelaySeconds: 5
            periodSeconds: 10
          resources:
            {{- toYaml .Values.controller.resources | nindent 12 }}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - ALL
          volumeMounts:
            - name: config
              mountPath: {{ .Values.controller.config.path }}
            {{ if .Values.kubeconfig.secret }}
            - name: kubeconfig
              mountPath: {{ .Values.kubeconfig.mountPath }}
            {{ end }}
            {{ if eq .Values.db.type "sqlite" }}
            - name: sqlite-db-volume
              mountPath: {{ .Values.db.sqlite.path }}
            {{ end }}
            - mountPath: /tmp/k8s-webhook-server/serving-certs
              name: cert
              readOnly: true
            {{ if .Values.controller.db.ssl.paths.ca.filename }}
            - name: db-ssl-secret-volume
              mountPath: {{ printf "%s%s" .Values.controller.db.ssl.paths.ca.path .Values.controller.db.ssl.paths.ca.filename }}
              subPath: {{ .Values.controller.db.ssl.paths.ca.filename }}
            {{ end }}
            {{ if .Values.controller.db.ssl.paths.cert.filename }}
            - name: db-ssl-secret-volume
              mountPath: {{ printf "%s%s" .Values.controller.db.ssl.paths.cert.path .Values.controller.db.ssl.paths.cert.filename }}
              subPath: {{ .Values.controller.db.ssl.paths.cert.filename }}
            {{ end }}
            {{ if .Values.controller.db.ssl.paths.key.filename }}
            - name: db-ssl-secret-volume
              mountPath: {{ printf "%s%s" .Values.controller.db.ssl.paths.key.path .Values.controller.db.ssl.paths.key.filename }}
              subPath: {{ .Values.controller.db.ssl.paths.key.filename }}
            {{ end }}
            {{- if eq .Values.controller.config.value.workers.workerType "pebble" }}
            - name: queue-storage
              mountPath: {{ .Values.controller.config.value.workers.queueDir }}
            {{- end }}
      serviceAccountName: operator-controller-manager
{{ end }}